INSTALAR:
    NodeJs 20.0.9 

#En la plantilla por defecto se indico 
    - Menu tipo Overlay
    - Tamaño letra 11px
    - Gutter de 0.3rem. Antes 1rem

    Nota: Se modifican los estilos para incorporar un contenedor (fijo) para las operaciones

#COLORES
    primary: b52822
    sombras: rgba(255, 38, 38, 0.5)
    b527225b
    boton hover #f54242

#Clases creadas para modificar estilos
    + Tarjeta con menos padding y bordes rectos
        .card--operation {
            padding: 1rem;
            border-radius: 0;
        }

    + Para reducir espacio entre las filas de campos
        .field--operation {
            margin-bottom: 0;
        }

    + Para alinear el botón de consulta:
        .flex-align-end {
            align-self: end;
            padding-bottom: 0.3rem;
        }

    + Sección SubMenu para las operaciones

#En los componentes genericos que tenemos
    -Algunos se modificaron para ser standalone
    -Las propiedades que no requerian ser any, les fue asignado el tipo de dato correcto
    -basic-table se modifico la sección de summary para usar las nuevas propiedades de flex. Se tendrìa que hacer lo mismo con reorder-table
    -basic-table se le añadio las propiedades "scrollable" y "scrollHeight"
    -basic-table se le añadio el estilo p-datatable-gridlines
    -transactionInfo se modificò para usar propiedades flex
    -dialog se le añadio la propiedad breakpoints (@input), al igual que a la ayuda, y ayuda-edo-programa
    -dialog se le añadio la propiedad width (@input)

# Operaciones en el TS
    -Los Promise los marca como obsoletos, por lo que se reemplaza por el suscribe
    -Los parámtros obtenidos de la ruta ahora se acceden asignados asi:  this.activatedRoute.snapshot.params['autCarga']
    -Los array COLS son de tipo  Column[]
        import { Column } from 'src/app/models/primeng'
        cols: Column[]
    
# Operaciones en el html
    + Cambiar las grillas e implementar las de PrimeFlex
        -Indicar los espacios que ocuparia para pantallas sm,md,lg,xl
        -Para añadir un margen en la parte inferior añadir class="mb-2"
        -Para las tarjetas añadir class="card--operation"
        -Para los campos añadir class="field--operation"
        -Para botón consultar (no tiene label) añadir class="flex-align-end" y style="width: auto"
            <div class="field field--operation flex-align-end">
                <button
                    style="width: auto"
                    pButton
                    pRipple
                    label="Consultar"
                    (click)="consult()"
                ></button>
            </div>

    + En los p-toolbar
        -Usar las secciones
            <div class="p-toolbar-group-start">
            <div class="p-toolbar-group-center">
            <div class="p-toolbar-group-end">
        -Para la separación entre los botones usar la clase:  class="mr-2"

    + Los inputs con FillWithCero se esta usando el ngModel

    + En los Calendarios
        -Añadir:
            [iconDisplay]="'input'"  : Icono calendario sencillo
            [showOnFocus]="false"    : Abre calendario si se da en el icono

        -Retirar:
            [locale]="es"   : ya no está disponible
        
        Nota: Se podria retirar  showButtonBar="true"

    + Para las Tablas
        -Añadir:
            styleClass="p-datatable-gridlines"
            scrollHeight="280px" (fixed headers)

#Eslint integrado en el proyecto
    -Instalar en el VSCode
        eslint
        ErrorLens

    -Configuracion en VSCode settings.json
        "[typescript]": {
            "editor.defaultFormatter": "dbaeumer.vscode-eslint"
        },
        "editor.codeActionsOnSave": {
            "source.fixAll": "explicit"
        },

https://ej2.syncfusion.com/angular/documentation/tab/how-to/adding-dynamic-items-with-content-reuse?cs-save-lang=1&cs-lang=ts
https://stackblitz.com/edit/angular-dynamic-tabs?file=app%2Fapp.component.ts


FALTA SOLVENTAR
<!-- (input)="dt.filter($event.target.value, col.field, 'startsWith')" -->